/* concServer.c - Exemplu de server TCP concurent
Asteapta un nume de la clienti; intoarce clientului sirul
"Hello nume".
*/

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/wait.h>

/* portul folosit */
#define PORT 11111

/* codul de eroare returnat de anumite apeluri */
extern int errno;

void sighandler(int signo)
{
	if (signo == SIGCHLD) //handler-ul, se acceseaza in parinte, dupa ce copilul isi termina executia
		// SIGCHLD inchide procesele zombie(procesul copil nu mai poate fi executat, dar a ramas deschis)
	{
		printf("[server-%d]Child terminated\n", getpid()); fflush(stdout);
		while (waitpid(-1, NULL, WNOHANG) > 0); //wait-ul asteapta ORICARE copil sa se termine daca e in executie
		//dar scopul este de alocare a resurselor ramase - tatal DEINREGISTREAZA copil terminat din sistem
		//waitpid-ul inseamna DEINREGISTREAZA cati copii ai, iar cand ai terminat (nu mai sunt copii) returneaza 0
		//-1 este folosit pentru ORICARE dintre copii - il face general, neblocant
	}
}

int main()
{
	struct sockaddr_in server;	// structura folosita de server
	struct sockaddr_in from;
	char msg[100];		//mesajul primit de la client 
	char msgrasp[100] = " ";        //mesaj de raspuns pentru client
	int sd;			//descriptorul de socket 
	int optval = 1;		//optiune folosita pentru setsockopt()

	/* crearea unui socket */
	if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
	{
		perror("[server]Eroare la socket().\n");
		return errno;
	}

	/*setam pentru socket optiunea SO_REUSEADDR */
	setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)); //reutilizarea adresei, in caz ca pica server-ul
	//(dureaza un anumit timp pana putem refolosi adresa, astfel putem sa ne conectam imediat la server) 

	/* pregatirea structurilor de date */
	bzero(&server, sizeof(server));
	bzero(&from, sizeof(from));

	/* umplem structura folosita de server */
	/* stabilirea familiei de socket-uri */
	server.sin_family = AF_INET;
	/* acceptam orice adresa */
	server.sin_addr.s_addr = htonl(INADDR_ANY);
	/* utilizam un port utilizator */
	server.sin_port = htons(PORT);

	/* atasam socketul */
	if (bind(sd, (struct sockaddr *) &server, sizeof(struct sockaddr)) == -1)
	{
		perror("[server]Eroare la bind().\n");
		return errno;
	}

	/* punem serverul sa asculte daca vin clienti sa se conecteze */
	if (listen(sd, 5) == -1)
	{
		perror("[server]Eroare la listen().\n");
		return errno;
	}

	printf("[server-%d]Asteptam la portul %d...\n", getpid(), PORT);
	fflush(stdout);

	signal(SIGCHLD, sighandler); //handlerul se apeleaza cand apare semnalul, ce anume apelez, dupa ce se termina un copil
	//signal(SIGCHLD, SIG_IGN); //face totul automat, tot ce a facut mai sus handler-ul

	/* servim in mod concurent clientii... */
	while (1)
	{
		int client;
		int length = sizeof(from);
		int pid;                        // id-ul procesului copil
		char address[INET_ADDRSTRLEN];  // adresa IP a clientului      

		bzero(&from, sizeof(from));

		/* acceptam un client (stare blocanta pina la realizarea conexiunii) */
		client = accept(sd, (struct sockaddr *) &from, &length);

		/* eroare la acceptarea conexiunii de la un client */
		if (client < 0)
		{
			perror("[server]Eroare la accept().\n");
			continue;
		}
		else
		{
			inet_ntop(AF_INET, &from.sin_addr.s_addr, address, INET_ADDRSTRLEN);
			//inet_ntop - converteste adresa IP intr-un String (human_frendly)
			//AF-INET - ce tip de adresa este
			printf("[server-%d]S-a conectat clientul: %s:%d\n", getpid(), address, ntohs(from.sin_port));
			fflush(stdout);
		}

		if ((pid = fork()) < 0) {
			perror("fork() error");
			continue;
		}
		else if (pid == 0) {    // procesul fiu care se va ocupa de client

			/* s-a realizat conexiunea, se astepta mesajul */
			bzero(msg, 100);
			printf("[server-%d]S-a realizat conexiunea.\n", getpid());
			//fflush (stdout);

			int robin = 0;
			int serif = 0;
			int nr;
			char caz[3];
			time_t t;
			srand((unsigned)time(&t));

			/* citirea numarului clientului */
			if (read(client, caz, 3) <= 0) {
				printf("[server-%d]Eroare la read() de la client.\n", getpid());
				close(client);	/* inchidem conexiunea cu clientul */
				continue;
			}
			else printf("Cazul a fost primit.\n");
			/* continuam sa ascultam */
			nr = atoi(caz);
			switch (nr) {
			case 1:
			{
				//nobilul cere verificarea padurii
				printf("[server-%d]Se cere verficarea padurii...%s\n", getpid(), msg);
				if (robin == 0) {
					bzero(msgrasp, 100);
					strcat(msgrasp, "Robin nu este in padure. Poti traversa. ");
					if (write(client, msgrasp, 100) <= 0)
					{
						printf("[server-%d]Eroare la write() catre client.\n", getpid());
						continue;		/* continuam sa ascultam */
					}
					else
						printf("[server-%d]Mesajul a fost transmis cu succes.\n", getpid());
				}
				break;
			}
			case 2:
			{	//conectarea serifului, while trebuie mutat in client, sau sa fie un nou fork in server pt fiecare client
				printf("Seriful din Nottingham s-a conectat la server. \n");
				printf("El va traversa padurea o data la cel mult un minut. \n");
				while (1){

					serif = 1;
					printf("[server] Seriful este in padure acum. \n");

					bzero(msgrasp, 100);
					strcat(msgrasp, "Seriful se afla in padure. \n ");
					if (write(client, msgrasp, 100) <= 0)
					{
						printf("[server]Eroare la write() catre client.\n");
						continue;		/* continuam sa ascultam */
					}
					else
						printf("[server]Mesajul a fost transmis cu succes.\n");  

					int random = rand() % 60;
					serif = 0;
					printf("Seriful nu se mai afla in padure. \n");
					sleep(random);
				}

				break;
			}
			case 3:
			{
				printf("Robin s-a conectat la server. \n");
				while (1){
					static int robin = 1;
					printf("Robin este acum in padure. \n");
					if (serif == 1){
						printf("Seriful din Nottingham este in padure acum. Robin va fi deconectat pentru 15 secunde. \n");
						static int robin = 0;
						sleep(15);
					}
				}

				break;
			}
			default: break;
			}
		}//copil
	}//while server
	return 0;
}